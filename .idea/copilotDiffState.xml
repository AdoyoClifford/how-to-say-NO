<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adoyo/howtosayno/ui/screen/NoReasonScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adoyo/howtosayno/ui/screen/NoReasonScreen.kt" />
              <option name="originalContent" value="package com.adoyo.howtosayno.ui.screen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Snackbar&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.adoyo.howtosayno.ui.state.NoReasonUiState&#10;import com.adoyo.howtosayno.ui.theme.CustomExpressiveShapes&#10;import com.adoyo.howtosayno.ui.theme.ExpressiveSpacing&#10;import com.adoyo.howtosayno.ui.theme.HowToSayNOTheme&#10;import com.adoyo.howtosayno.ui.viewmodel.NoReasonViewModel&#10;&#10;/**&#10; * Main screen composable for displaying &quot;No&quot; reasons&#10; * &#10; * This screen implements Material 3 Expressive design with:&#10; * - Large, prominent text display for reasons&#10; * - Expressive button for fetching new reasons&#10; * - Loading indicators with smooth animations&#10; * - Error handling with retry functionality&#10; * - Offline support indicators&#10; * &#10; * Requirements addressed:&#10; * - 1.3: Display reason text to user&#10; * - 3.1, 3.2: Loading indicator display&#10; * - 4.1, 4.2: Button interaction and state management&#10; * - 6.1, 6.2, 6.3, 6.4: Material 3 Expressive design&#10; */&#10;@Composable&#10;fun NoReasonScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: NoReasonViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Show error messages in snackbar&#10;    LaunchedEffect(uiState.error) {&#10;        uiState.error?.let { error -&gt;&#10;            snackbarHostState.showSnackbar(&#10;                message = error,&#10;                withDismissAction = true&#10;            )&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        NoReasonContent(&#10;            uiState = uiState,&#10;            onFetchNewReason = viewModel::fetchNewReason,&#10;            onRetry = viewModel::retry,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        // Snackbar for error messages&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        ) { snackbarData -&gt;&#10;            Snackbar(&#10;                snackbarData = snackbarData,&#10;                shape = CustomExpressiveShapes.ExpressiveCard&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NoReasonContent(&#10;    uiState: NoReasonUiState,&#10;    onFetchNewReason: () -&gt; Unit,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(ExpressiveSpacing.ScreenPadding)&#10;            .verticalScroll(rememberScrollState()),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Main content area with reason display&#10;        ReasonDisplayCard(&#10;            uiState = uiState,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .weight(1f, fill = false)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(ExpressiveSpacing.SectionSpacing))&#10;&#10;        // Action buttons&#10;        ActionButtons(&#10;            uiState = uiState,&#10;            onFetchNewReason = onFetchNewReason,&#10;            onRetry = onRetry,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        // Offline indicator&#10;        if (uiState.isOffline &amp;&amp; uiState.hasCache) {&#10;            Spacer(modifier = Modifier.height(ExpressiveSpacing.Medium))&#10;            OfflineIndicator()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ReasonDisplayCard(&#10;    uiState: NoReasonUiState,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = CustomExpressiveShapes.ExpressiveContainer,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = 4.dp&#10;        )&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(ExpressiveSpacing.ExpressiveExtraLarge),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    LoadingIndicator()&#10;                }&#10;                uiState.hasContent -&gt; {&#10;                    ReasonText(&#10;                        reason = uiState.reason,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;                else -&gt; {&#10;                    PlaceholderText()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LoadingIndicator() {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        CircularProgressIndicator(&#10;            modifier = Modifier.size(48.dp),&#10;            color = MaterialTheme.colorScheme.primary,&#10;            strokeWidth = 4.dp&#10;        )&#10;        Spacer(modifier = Modifier.height(ExpressiveSpacing.Medium))&#10;        Text(&#10;            text = &quot;Finding a reason...&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ReasonText(&#10;    reason: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = reason.isNotEmpty(),&#10;        enter = fadeIn(animationSpec = tween(600)),&#10;        exit = fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Text(&#10;            text = reason,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center,&#10;            modifier = modifier&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PlaceholderText() {&#10;    Text(&#10;        text = &quot;Tap the button below to get a creative reason for saying no!&quot;,&#10;        style = MaterialTheme.typography.bodyLarge,&#10;        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;        textAlign = TextAlign.Center&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun ActionButtons(&#10;    uiState: NoReasonUiState,&#10;    onFetchNewReason: () -&gt; Unit,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        if (uiState.shouldShowRetry) {&#10;            // Show retry button when there's an error&#10;            OutlinedButton(&#10;                onClick = onRetry,&#10;                enabled = !uiState.isLoading,&#10;                shape = CustomExpressiveShapes.ExpressiveButton,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(ExpressiveSpacing.ExpressiveTouchTarget)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Try Again&quot;,&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        } else {&#10;            // Main fetch button&#10;            Button(&#10;                onClick = onFetchNewReason,&#10;                enabled = uiState.isButtonEnabled &amp;&amp; !uiState.isLoading,&#10;                shape = CustomExpressiveShapes.ExpressiveButton,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                elevation = ButtonDefaults.buttonElevation(&#10;                    defaultElevation = 6.dp,&#10;                    pressedElevation = 12.dp&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(ExpressiveSpacing.ExpressiveTouchTarget)&#10;            ) {&#10;                if (uiState.isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(20.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary,&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                } else {&#10;                    Text(&#10;                        text = if (uiState.hasContent) &quot;Get Another Reason&quot; else &quot;Get a Reason&quot;,&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun OfflineIndicator() {&#10;    Card(&#10;        shape = CustomExpressiveShapes.ExpressiveCard,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.7f)&#10;        )&#10;    ) {&#10;        Text(&#10;            text = &quot;Showing cached reason (offline)&quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.padding(&#10;                horizontal = ExpressiveSpacing.Medium,&#10;                vertical = ExpressiveSpacing.Small&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;// Preview composables&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenPreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                reason = &quot;This feels like something Future Me would yell at Present Me for agreeing to.&quot;,&#10;                isLoading = false,&#10;                hasCache = true&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenLoadingPreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                isLoading = true,&#10;                isButtonEnabled = false&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenErrorPreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                error = &quot;No internet connection&quot;,&#10;                isButtonEnabled = true&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenOfflinePreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                reason = &quot;I'm already committed to being uncommitted that day.&quot;,&#10;                isOffline = true,&#10;                hasCache = true,&#10;                isButtonEnabled = true&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.adoyo.howtosayno.ui.screen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Snackbar&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.adoyo.howtosayno.ui.state.NoReasonUiState&#10;import com.adoyo.howtosayno.ui.theme.CustomExpressiveShapes&#10;import com.adoyo.howtosayno.ui.theme.ExpressiveSpacing&#10;import com.adoyo.howtosayno.ui.theme.HowToSayNOTheme&#10;import com.adoyo.howtosayno.ui.viewmodel.NoReasonViewModel&#10;&#10;/**&#10; * Main screen composable for displaying &quot;No&quot; reasons&#10; * &#10; * This screen implements Material 3 Expressive design with:&#10; * - Large, prominent text display for reasons&#10; * - Expressive button for fetching new reasons&#10; * - Loading indicators with smooth animations&#10; * - Error handling with retry functionality&#10; * - Offline support indicators&#10; * &#10; * Requirements addressed:&#10; * - 1.3: Display reason text to user&#10; * - 3.1, 3.2: Loading indicator display&#10; * - 4.1, 4.2: Button interaction and state management&#10; * - 6.1, 6.2, 6.3, 6.4: Material 3 Expressive design&#10; */&#10;@Composable&#10;fun NoReasonScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: NoReasonViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    // Show error messages in snackbar&#10;    LaunchedEffect(uiState.error) {&#10;        uiState.error?.let { error -&gt;&#10;            snackbarHostState.showSnackbar(&#10;                message = error,&#10;                withDismissAction = true&#10;            )&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        NoReasonContent(&#10;            uiState = uiState,&#10;            onFetchNewReason = viewModel::fetchNewReason,&#10;            onRetry = viewModel::retry,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        // Snackbar for error messages&#10;        SnackbarHost(&#10;            hostState = snackbarHostState,&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        ) { snackbarData -&gt;&#10;            Snackbar(&#10;                snackbarData = snackbarData,&#10;                shape = CustomExpressiveShapes.ExpressiveCard&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NoReasonContent(&#10;    uiState: NoReasonUiState,&#10;    onFetchNewReason: () -&gt; Unit,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(ExpressiveSpacing.ScreenPadding)&#10;            .verticalScroll(rememberScrollState()),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        // Main content area with reason display&#10;        ReasonDisplayCard(&#10;            uiState = uiState,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .weight(1f, fill = false)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(ExpressiveSpacing.SectionSpacing))&#10;&#10;        // Action buttons&#10;        ActionButtons(&#10;            uiState = uiState,&#10;            onFetchNewReason = onFetchNewReason,&#10;            onRetry = onRetry,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        // Offline indicator&#10;        if (uiState.isOffline &amp;&amp; uiState.hasCache) {&#10;            Spacer(modifier = Modifier.height(ExpressiveSpacing.Medium))&#10;            OfflineIndicator()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ReasonDisplayCard(&#10;    uiState: NoReasonUiState,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = CustomExpressiveShapes.ExpressiveContainer,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = 4.dp&#10;        )&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(ExpressiveSpacing.ExpressiveExtraLarge),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    LoadingIndicator()&#10;                }&#10;                uiState.hasContent -&gt; {&#10;                    ReasonText(&#10;                        reason = uiState.reason,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;                else -&gt; {&#10;                    PlaceholderText()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LoadingIndicator() {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        CircularProgressIndicator(&#10;            modifier = Modifier.size(48.dp),&#10;            color = MaterialTheme.colorScheme.primary,&#10;            strokeWidth = 4.dp&#10;        )&#10;        Spacer(modifier = Modifier.height(ExpressiveSpacing.Medium))&#10;        Text(&#10;            text = &quot;Finding a reason...&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ReasonText(&#10;    reason: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = reason.isNotEmpty(),&#10;        enter = fadeIn(animationSpec = tween(600)),&#10;        exit = fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Text(&#10;            text = reason,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            textAlign = TextAlign.Center,&#10;            modifier = modifier&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PlaceholderText() {&#10;    Text(&#10;        text = &quot;Tap the button below to get a creative reason for saying no!&quot;,&#10;        style = MaterialTheme.typography.bodyLarge,&#10;        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;        textAlign = TextAlign.Center&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun ActionButtons(&#10;    uiState: NoReasonUiState,&#10;    onFetchNewReason: () -&gt; Unit,&#10;    onRetry: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        if (uiState.shouldShowRetry) {&#10;            // Show retry button when there's an error&#10;            OutlinedButton(&#10;                onClick = onRetry,&#10;                enabled = !uiState.isLoading,&#10;                shape = CustomExpressiveShapes.ExpressiveButton,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(ExpressiveSpacing.ExpressiveTouchTarget)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Try Again&quot;,&#10;                    style = MaterialTheme.typography.labelLarge&#10;                )&#10;            }&#10;        } else {&#10;            // Main fetch button&#10;            Button(&#10;                onClick = onFetchNewReason,&#10;                enabled = uiState.isButtonEnabled &amp;&amp; !uiState.isLoading,&#10;                shape = CustomExpressiveShapes.ExpressiveButton,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                elevation = ButtonDefaults.buttonElevation(&#10;                    defaultElevation = 6.dp,&#10;                    pressedElevation = 12.dp&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(ExpressiveSpacing.ExpressiveTouchTarget)&#10;            ) {&#10;                if (uiState.isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(20.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary,&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                } else {&#10;                    Text(&#10;                        text = if (uiState.hasContent) &quot;Get Another Reason&quot; else &quot;Get a Reason&quot;,&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun OfflineIndicator() {&#10;    Card(&#10;        shape = CustomExpressiveShapes.ExpressiveCard,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.7f)&#10;        )&#10;    ) {&#10;        Text(&#10;            text = &quot;Showing cached reason (offline)&quot;,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            modifier = Modifier.padding(&#10;                horizontal = ExpressiveSpacing.Medium,&#10;                vertical = ExpressiveSpacing.Small&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;// Preview composables&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenPreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                reason = &quot;This feels like something Future Me would yell at Present Me for agreeing to.&quot;,&#10;                isLoading = false,&#10;                hasCache = true&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenLoadingPreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                isLoading = true,&#10;                isButtonEnabled = false&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenErrorPreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                error = &quot;No internet connection&quot;,&#10;                isButtonEnabled = true&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;private fun NoReasonScreenOfflinePreview() {&#10;    HowToSayNOTheme {&#10;        NoReasonContent(&#10;            uiState = NoReasonUiState(&#10;                reason = &quot;I'm already committed to being uncommitted that day.&quot;,&#10;                isOffline = true,&#10;                hasCache = true,&#10;                isButtonEnabled = true&#10;            ),&#10;            onFetchNewReason = {},&#10;            onRetry = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>